#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  /dev/stderr  notice;
#error_log  logs/error.log  info;

pid        /run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /dev/stdout  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  ${NGINX_KEEPALIVE_TIMEOUT};

    #gzip  on;
    charset utf-8;
    client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};

    server {
        listen 80;
        listen [::]:80;

        server_name _ default;

        root /var/www/localhost/htdocs;

        index index.php index.html;

        location ~ ^/(status|ping)$ {
            log_subrequest off;
            access_log off;
            ## Add another config File, which is generated based upon enviroment variable HUMHUB_REVERSEPROXY_WHITELIST  ##
            include allowedips.conf;
            deny all;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_pass ${NGINX_UPSTREAM};
        }

        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        location ~* \.(?:ico|gif|jpe?g|png|ttf|woff)$ {
            access_log off;
            expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public, mustrevalidate, proxy-revalidate";
        }

        location ~ ^/(protected|framework|themes/\w+/views|\.|uploads/file) {
            deny all;
        }

        location ~ ^/(assets|static|themes|uploads) {
            expires 10d;
            add_header Cache-Control "public, no-transform";
        }

        location ~ \.php$ {
            try_files $uri =404;

            fastcgi_index index.php;
            fastcgi_split_path_info ^(.+\.php)(.*)$;

            #let yii catch the calls to unexisting PHP files
            set $fsn /index.php;
            if (-f $document_root$fastcgi_script_name){
                    set $fsn $fastcgi_script_name;
            }

            fastcgi_keep_conn on;
            include fastcgi_params;
            fastcgi_param PATH_INFO       $fastcgi_path_info;
            fastcgi_param SCRIPT_FILENAME $document_root$fsn;
            fastcgi_pass ${NGINX_UPSTREAM};
        }

        location ~ /\.ht {
            deny all;
        }

        location /protected {
            deny all;
        }

        location /uploads/file {
            deny all;
        }
    }
}
